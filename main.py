import customtkinter as ctk
from tkinter import colorchooser
import json
import os
import sys

def resource_path(relative_path):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–∞–∫ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞, —Ç–∞–∫ –∏ –∏–∑ .exe.
    –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞.
    """
    try:
        # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é PyInstaller
        if getattr(sys, 'frozen', False):
            base_path = os.path.dirname(sys.executable)
        else:
            base_path = os.path.dirname(os.path.abspath(__file__))
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

class KanbanApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title("Kanban Board")
        self.geometry("1300x800")
        ctk.set_appearance_mode("System")  # Light/Dark mode
        ctk.set_default_color_theme("blue")  # –¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞

        # –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        self.column_titles = ["Queue", "In Progress", "Review", "Done"]
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (–∫–ª—é—á: –Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏–µ: CTkScrollableFrame)
        self.columns = {}

        # –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
        self.selected_sticker = None

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
        self.save_file = resource_path("stickers.json")

        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        self.main_frame = ctk.CTkFrame(self)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        for title in self.column_titles:
            self.create_column(title)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ –∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        input_frame = ctk.CTkFrame(self)
        input_frame.pack(side="top", fill="x", padx=20, pady=10)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
        self.task_input = ctk.CTkEntry(input_frame, placeholder_text="Enter a new task")
        self.task_input.pack(side="left", fill="x", expand=True, padx=(0, 10), pady=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        self.add_task_button = ctk.CTkButton(input_frame, text="+", width=40, height=40, command=self.add_task)
        self.add_task_button.pack(side="left", padx=(0, 10), pady=10)

        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞
        self.move_left_button = ctk.CTkButton(input_frame, text="‚Üê", width=40, height=40,
                                             command=lambda: self.move_task(-1))
        self.move_left_button.pack(side="left", padx=(0, 5), pady=10)

        self.move_right_button = ctk.CTkButton(input_frame, text="‚Üí", width=40, height=40,
                                              command=lambda: self.move_task(1))
        self.move_right_button.pack(side="left", padx=(5, 0), pady=10)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.load_stickers()

    def create_column(self, title):
        """–°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏."""
        column_frame = ctk.CTkFrame(self.main_frame, width=250)
        column_frame.pack_propagate(False)  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        column_frame.pack(side="left", fill="both", expand=True, padx=10)  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        title_label = ctk.CTkLabel(column_frame, text=title, font=("Arial", 16, "bold"))
        title_label.pack(pady=10)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CTkScrollableFrame –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        tasks_scroll_frame = ctk.CTkScrollableFrame(column_frame, width=250, height=500)
        tasks_scroll_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ tasks_scroll_frame, –∫—É–¥–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å—Ç–∏–∫–µ—Ä—ã
        self.columns[title] = tasks_scroll_frame

    def add_task(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –∫–æ–ª–æ–Ω–∫—É Queue."""
        task_text = self.task_input.get().strip()
        if task_text:
            self.create_sticker(self.columns["Queue"], text=task_text, bg_color="gray75")
            self.task_input.delete(0, "end")
            self.save_stickers()

    def create_sticker(self, parent_frame, text="", bg_color="gray75"):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä (–∑–∞–¥–∞—á—É) –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ—Ä–µ–π–º–µ."""
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–º–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–≤–µ—Ç–æ–º —Ñ–æ–Ω–∞
        sticker = ctk.CTkFrame(parent_frame, corner_radius=8, fg_color=bg_color, border_width=2, border_color=bg_color)
        sticker.pack(pady=5, padx=5, fill="x")

        # –ö–Ω–æ–ø–∫–∞-–∫–∞—Ä–∞–Ω–¥–∞—à –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ–Ω–∞ —Å—Ç–∏–∫–µ—Ä–∞ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
        edit_button = ctk.CTkButton(sticker, text="üñâ", width=30, fg_color="transparent", text_color="black",
                                    command=lambda: self.edit_sticker_bg(sticker))
        edit_button.place(relx=0.0, rely=0.0, x=5, y=5, anchor="nw")

        # –ö–Ω–æ–ø–∫–∞-–∫—Ä–µ—Å—Ç–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
        delete_button = ctk.CTkButton(sticker, text="‚úï", width=30, fg_color="transparent", text_color="black",
                                      command=lambda: self.delete_sticker(sticker))
        delete_button.place(relx=1.0, rely=0.0, x=-5, y=5, anchor="ne")

        # –ú–µ—Ç–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º, —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
        sticker_label = ctk.CTkLabel(sticker, text=text, text_color="black", anchor="w",
                                     wraplength=220, justify="left")
        # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª –∫–Ω–æ–ø–∫–∏
        sticker_label.pack(side="top", fill="both", expand=True, padx=5, pady=(40,5))

        # –°–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
        sticker.bind("<Button-1>", lambda e: self.select_sticker(sticker))
        sticker_label.bind("<Button-1>", lambda e: self.select_sticker(sticker))

        return sticker

    def select_sticker(self, sticker):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ."""
        # –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.selected_sticker is not None and self.selected_sticker != sticker:
            prev_bg = self.selected_sticker.cget("fg_color")
            self.selected_sticker.configure(border_color=prev_bg)

        self.selected_sticker = sticker
        # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–∫–µ—Ä —Å–∏–Ω–∏–º –∫–æ–Ω—Ç—É—Ä–æ–º
        self.selected_sticker.configure(border_color="blue")

    def move_task(self, direction):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –≤ —Å–æ—Å–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É."""
        if self.selected_sticker is None:
            return  # –ù–µ –≤—ã–±—Ä–∞–Ω —Å—Ç–∏–∫–µ—Ä –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–π –∫–æ–ª–æ–Ω–∫–µ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å—Ç–∏–∫–µ—Ä
        current_column = None
        for col_name, col_frame in self.columns.items():
            if self.selected_sticker.master == col_frame:
                current_column = col_name
                break

        if current_column is None:
            return

        current_index = self.column_titles.index(current_column)
        target_index = current_index + direction

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è
        if 0 <= target_index < len(self.column_titles):
            target_column_name = self.column_titles[target_index]
            target_frame = self.columns[target_column_name]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ü–≤–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
            # –ò—â–µ–º –º–µ—Ç–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º
            sticker_label = None
            for child in self.selected_sticker.winfo_children():
                if isinstance(child, ctk.CTkLabel):
                    sticker_label = child
                    break
            if sticker_label is None:
                return

            task_text = sticker_label.cget("text")
            bg_color = self.selected_sticker.cget("fg_color")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–∫–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            old_sticker = self.selected_sticker

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä –≤ —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
            new_sticker = self.create_sticker(target_frame, text=task_text, bg_color=bg_color)

            # –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä
            self.select_sticker(new_sticker)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∏–∫–µ—Ä
            old_sticker.destroy()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.save_stickers()

    def edit_sticker_bg(self, sticker):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ —Å—Ç–∏–∫–µ—Ä–∞."""
        color_code = colorchooser.askcolor(title="Choose background color")
        if color_code and color_code[1]:
            new_bg = color_code[1]
            sticker.configure(fg_color=new_bg)
            # –ï—Å–ª–∏ —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä –≤—ã–±—Ä–∞–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–Ω—é—é —Ä–∞–º–∫—É
            if self.selected_sticker == sticker:
                sticker.configure(border_color="blue")
            else:
                # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω, —Ä–∞–º–∫—É –¥–µ–ª–∞–µ–º –ø–æ–¥ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                sticker.configure(border_color=new_bg)
            self.save_stickers()

    def delete_sticker(self, sticker):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞."""
        if self.selected_sticker == sticker:
            self.selected_sticker = None
        sticker.destroy()
        self.save_stickers()

    def save_stickers(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å—Ç–∏–∫–µ—Ä—ã –≤ —Ñ–∞–π–ª."""
        data = {title: [] for title in self.column_titles}
        for title, col_frame in self.columns.items():
            for sticker in col_frame.winfo_children():
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ç–∏–∫–µ—Ä–∞
                text = ""
                bg_color = sticker.cget("fg_color")
                for child in sticker.winfo_children():
                    if isinstance(child, ctk.CTkLabel):
                        text = child.cget("text")
                        break
                data[title].append({"text": text, "bg_color": bg_color})
        try:
            with open(self.save_file, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
        except Exception as e:
            print(f"Error saving stickers: {e}")

    def load_stickers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
        if not os.path.exists(self.save_file):
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            with open(self.save_file, "w", encoding="utf-8") as f:
                json.dump({title: [] for title in self.column_titles}, f, ensure_ascii=False, indent=4)
            return  # –§–∞–π–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω, –Ω–µ—Ç —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

        try:
            with open(self.save_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            for title, stickers in data.items():
                if title in self.columns:
                    for sticker_data in stickers:
                        text = sticker_data.get("text", "")
                        bg_color = sticker_data.get("bg_color", "gray75")
                        self.create_sticker(self.columns[title], text=text, bg_color=bg_color)
        except Exception as e:
            print(f"Error loading stickers: {e}")

if __name__ == "__main__":
    app = KanbanApp()
    app.mainloop()
