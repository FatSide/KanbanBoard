# kanban_app.py
import customtkinter as ctk
from tkinter import colorchooser
import os
import sys
from typing import Any, Dict, Tuple, List
from kanban_model import KanbanModel

def resource_path(relative_path):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–∞–∫ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞, —Ç–∞–∫ –∏ –∏–∑ .exe.
    –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞.
    """
    try:
        # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é PyInstaller
        if getattr(sys, 'frozen', False):
            base_path = os.path.dirname(sys.executable)
        else:
            base_path = os.path.dirname(os.path.abspath(__file__))
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

# View and Controller
class KanbanApp(ctk.CTk):
    def __init__(self, model: KanbanModel):
        super().__init__()
        self.model = model
        self.model.attach(self.on_model_event)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title("Kanban Board")
        self.geometry("1300x800")
        ctk.set_appearance_mode("System")  # Light/Dark mode
        ctk.set_default_color_theme("blue")  # –¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞

        # –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        self.column_titles = model.column_titles
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (–∫–ª—é—á: –Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏–µ: ColumnView)
        self.columns: Dict[str, ColumnView] = {}

        # –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
        self.selected_sticker: Tuple[str, int] = (None, None)  # (state, index)

        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        self.main_frame = ctk.CTkFrame(self)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        for title in self.column_titles:
            column_view = ColumnView(self.main_frame, title, self)
            self.columns[title] = column_view

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ –∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        input_frame = ctk.CTkFrame(self)
        input_frame.pack(side="top", fill="x", padx=20, pady=10)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
        self.task_input = ctk.CTkEntry(input_frame, placeholder_text="Enter a new task")
        self.task_input.pack(side="left", fill="x", expand=True, padx=(0, 10), pady=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        self.add_task_button = ctk.CTkButton(input_frame, text="+", width=40, height=40, command=self.add_task)
        self.add_task_button.pack(side="left", padx=(0, 10), pady=10)

        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞
        self.move_left_button = ctk.CTkButton(
            input_frame, text="‚Üê", width=40, height=40,
            command=lambda: self.move_task("left")
        )
        self.move_left_button.pack(side="left", padx=(0, 5), pady=10)

        self.move_right_button = ctk.CTkButton(
            input_frame, text="‚Üí", width=40, height=40,
            command=lambda: self.move_task("right")
        )
        self.move_right_button.pack(side="left", padx=(5, 0), pady=10)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –º–æ–¥–µ–ª–∏
        self.load_initial_stickers()

    def load_initial_stickers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –º–æ–¥–µ–ª–∏."""
        for state, stickers in self.model.columns.items():
            for sticker in stickers:
                self.columns[state].add_sticker_view(sticker["text"], sticker["bg_color"])

    def on_model_event(self, event: str, data: Any):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–µ–ª–∏."""
        if event == "add_sticker":
            state = data["state"]
            sticker = data["sticker"]
            self.columns[state].add_sticker_view(sticker["text"], sticker["bg_color"])
        elif event == "delete_sticker":
            state = data["state"]
            index = data["sticker_index"]
            self.columns[state].delete_sticker_view(index)
            # –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if self.selected_sticker == (state, index):
                self.selected_sticker = (None, None)
        elif event == "move_sticker":
            # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
            self.refresh_all_columns()
            self.selected_sticker = (None, None)
        elif event == "edit_sticker_bg":
            state = data["state"]
            index = data["sticker_index"]
            new_bg = data["new_bg"]
            self.columns[state].update_sticker_bg(index, new_bg)
        elif event == "load_stickers":
            self.load_initial_stickers()

    def refresh_all_columns(self):
        """–ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫."""
        for column in self.columns.values():
            column.clear_stickers()
        self.load_initial_stickers()

    def add_task(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –º–æ–¥–µ–ª—å."""
        task_text = self.task_input.get().strip()
        if task_text:
            self.model.add_sticker("Queue", task_text, bg_color="gray75")
            self.task_input.delete(0, "end")

    def select_sticker(self, state: str, index: int):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä."""
        # –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.selected_sticker != (None, None):
            prev_state, prev_index = self.selected_sticker
            self.columns[prev_state].deselect_sticker(prev_index)

        # –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä
        self.selected_sticker = (state, index)
        self.columns[state].select_sticker(index)

    def move_task(self, direction: str):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –≤ —Å–æ—Å–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É."""
        if self.selected_sticker == (None, None):
            return  # –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞

        state, index = self.selected_sticker
        self.model.move_sticker(state, index, direction)

    def run(self):
        self.mainloop()

# Column View
class ColumnView(ctk.CTkFrame):
    def __init__(self, parent, title: str, app: KanbanApp):
        super().__init__(parent, width=250)
        self.pack_propagate(False)
        self.pack(side="left", fill="both", expand=True, padx=10)

        self.title = title
        self.app = app

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        title_label = ctk.CTkLabel(self, text=title, font=("Arial", 16, "bold"))
        title_label.pack(pady=10)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CTkScrollableFrame –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.tasks_scroll_frame = ctk.CTkScrollableFrame(self, width=250, height=500)
        self.tasks_scroll_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
        self.stickers: List[StickerView] = []

    def add_sticker_view(self, text: str, bg_color: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –≤ –∫–æ–ª–æ–Ω–∫—É."""
        sticker = StickerView(self.tasks_scroll_frame, self.title, len(self.stickers), text, bg_color, self.app)
        self.stickers.append(sticker)
        sticker.pack(pady=5, padx=5, fill="x")

    def delete_sticker_view(self, index: int):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏."""
        if 0 <= index < len(self.stickers):
            sticker = self.stickers.pop(index)
            sticker.destroy()
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ç–∏–∫–µ—Ä–æ–≤
            for i in range(index, len(self.stickers)):
                self.stickers[i].index = i

    def select_sticker(self, index: int):
        """–í—ã–¥–µ–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        if 0 <= index < len(self.stickers):
            self.stickers[index].select()

    def deselect_sticker(self, index: int):
        """–°–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        if 0 <= index < len(self.stickers):
            self.stickers[index].deselect()

    def update_sticker_bg(self, index: int, new_bg: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ç–∏–∫–µ—Ä–∞."""
        if 0 <= index < len(self.stickers):
            self.stickers[index].update_bg(new_bg)

    def clear_stickers(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è."""
        for sticker in self.stickers:
            sticker.destroy()
        self.stickers.clear()

# Sticker View
class StickerView(ctk.CTkFrame):
    def __init__(self, parent, state: str, index: int, text: str, bg_color: str, app: KanbanApp):
        super().__init__(parent, corner_radius=8, fg_color=bg_color, border_width=2, border_color=bg_color)
        self.state = state
        self.index = index
        self.app = app

        # –ö–Ω–æ–ø–∫–∞-–∫–∞—Ä–∞–Ω–¥–∞—à –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ–Ω–∞ —Å—Ç–∏–∫–µ—Ä–∞ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
        edit_button = ctk.CTkButton(
            self, text="üñâ", width=30, fg_color="transparent",
            text_color="black", command=self.edit_bg
        )
        edit_button.place(relx=0.0, rely=0.0, x=5, y=5, anchor="nw")

        # –ö–Ω–æ–ø–∫–∞-–∫—Ä–µ—Å—Ç–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
        delete_button = ctk.CTkButton(
            self, text="‚úï", width=30, fg_color="transparent",
            text_color="black", command=self.delete
        )
        delete_button.place(relx=1.0, rely=0.0, x=-5, y=5, anchor="ne")

        # –ú–µ—Ç–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º, —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
        self.label = ctk.CTkLabel(
            self, text=text, text_color="black", anchor="w",
            wraplength=220, justify="left"
        )
        self.label.pack(side="top", fill="both", expand=True, padx=5, pady=(40,5))

        # –°–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
        self.bind("<Button-1>", self.on_click)
        self.label.bind("<Button-1>", self.on_click)

    def on_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä–µ."""
        self.app.select_sticker(self.state, self.index)

    def select(self):
        """–í—ã–¥–µ–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä."""
        self.configure(border_color="blue")

    def deselect(self):
        """–°–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞."""
        self.configure(border_color=self.cget("fg_color"))

    def edit_bg(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ç–∏–∫–µ—Ä–∞."""
        color_code = colorchooser.askcolor(title="Choose background color", initialcolor=self.cget("fg_color"))
        if color_code and color_code[1]:
            new_bg = color_code[1]
            self.configure(fg_color=new_bg, border_color=new_bg)
            self.app.model.edit_sticker_bg(self.state, self.index, new_bg)

    def delete(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä."""
        self.app.model.delete_sticker(self.state, self.index)

    def update_bg(self, new_bg: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ç–∏–∫–µ—Ä–∞."""
        self.configure(fg_color=new_bg, border_color=new_bg)

# Entry Point
if __name__ == "__main__":
    SAVE_FILE = resource_path("stickers.json")
    COLUMN_TITLES = ["Queue", "In Progress", "Review", "Done"]

    model = KanbanModel(SAVE_FILE, COLUMN_TITLES)
    app = KanbanApp(model)
    app.run()
